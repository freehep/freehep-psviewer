%!PS

%	This example appears in section "Extending the Playing Cards Font
%	to a Composite Font" in Chapter 10 - "Fonts".
%
%	Notes:		This program uses the font "deck1.ps".


12 dict						%  dictionary for base font
dup						%  make copy for later
begin						%  place on dictionary stack
	/FontName /Clubs-Suit def		%  define name
	/FontType 3 def				%  user-defined font
	/FontMatrix [ 0.001 0 0 0.001 0 0 ] def	%  1000-unit system
	/FontBBox [ 0 0 0 0 ] def		%  overall font bounding box
	/Encoding 256 array def			%  encoding
	0 1 255 {				%  fill with /.notdef
		Encoding exch /.notdef put
	} for
	(0) 0 get				%  get position of char "0"
	Encoding exch				%  get encoding
	[					%  ten characters
		/Ten /.notdef /Two /Three /Four
		/Five /Six /Seven /Eight /Nine
	] putinterval				%  fill in character codes
	(A) 0 get				%  get position of "A"
	Encoding exch				%  get encoding
	/Ace put				%  put name for /Ace
	/Metrics 10 dict def			%  define Metrics dictionary
	/UniqueID 4 def				%  ensure unique ID
	/CardShape {
		255 165 moveto    225 165 185 145 155 135 curveto
		175 175 185 215 185 245 curveto
		195 355 95 415 -5 415 curveto
		-105 415 -195 365 -195 255 curveto
		-195 225 -185 175 -155 135 curveto
		-185 145 -225 155 -255 155 curveto
		-355 155 -435 95 -425 -55 curveto
		-415 -155 -325 -225 -235 -225 curveto
		-165 -225 -75 -185 -15 -85 curveto
		-15 -295 -155 -375 -285 -385 curveto
		-285 -415 lineto    -235 -415 lineto
		-95 -385 105 -385 245 -415 curveto
		295 -415 lineto    285 -385 lineto
		95 -375 15 -205 15 -85 curveto
		75 -185 155 -235 225 -235 curveto
		325 -235 415 -155 425 -45 curveto
		435 55 355 165 255 165 curveto    closepath
	} def
	/BuildChar {				%  interface procedure
		rootfont /RootBuildChar get	%  get root font proc
		exec				%  execute it
	} def					%  end of interface procedure
end						%  remove from dict stack
/Clubs-Suit exch				%  name of font
definefont					%  define this base font
pop						%  remove extraneous dict


12 dict						%  dictionary for base font
dup						%  make copy for later
begin						%  place on dictionary stack
	/FontName /Diamonds-Suit def		%  define name
	/FontType 3 def				%  user-defined font
	/FontMatrix [ 0.001 0 0 0.001 0 0 ] def	%  1000-unit system
	/FontBBox [ 0 0 0 0 ] def		%  overall font bounding box
	/Encoding 256 array def			%  encoding
	0 1 255 {				%  fill with /.notdef
		Encoding exch /.notdef put
	} for
	(0) 0 get				%  get position of char "0"
	Encoding exch				%  get encoding
	[					%  ten characters
		/Ten /.notdef /Two /Three /Four
		/Five /Six /Seven /Eight /Nine
	] putinterval				%  fill in character codes
	(A) 0 get				%  get position of "A"
	Encoding exch				%  get encoding
	/Ace put				%  put name for /Ace
	/Metrics 10 dict def			%  define Metrics dictionary
	/UniqueID 3 def				%  ensure unique ID
	/CardShape {
		0 405 moveto    -320 -15 lineto
		0 -465 lineto    320 -15 lineto
		0 405 lineto    closepath
	} def
	/BuildChar {				%  interface procedure
		rootfont /RootBuildChar get	%  get root font proc
		exec				%  execute it
	} def					%  end of interface procedure
end						%  remove from dict stack
/Diamonds-Suit exch				%  name of font
definefont					%  define this base font
pop						%  remove extraneous dict


12 dict						%  dictionary for base font
dup						%  make copy for later
begin						%  place on dictionary stack
	/FontName /Hearts-Suit def		%  define name
	/FontType 3 def				%  user-defined font
	/FontMatrix [ 0.001 0 0 0.001 0 0 ] def	%  1000-unit system
	/FontBBox [ 0 0 0 0 ] def		%  overall font bounding box
	/Encoding 256 array def			%  encoding
	0 1 255 {				%  fill with /.notdef
		Encoding exch /.notdef put
	} for
	(0) 0 get				%  get position of char "0"
	Encoding exch				%  get encoding
	[					%  ten characters
		/Ten /.notdef /Two /Three /Four
		/Five /Six /Seven /Eight /Nine
	] putinterval				%  fill in character codes
	(A) 0 get				%  get position of "A"
	Encoding exch				%  get encoding
	/Ace put				%  put name for /Ace
	/Metrics 10 dict def			%  define Metrics dictionary
	/UniqueID 2 def				%  ensure unique ID
	/CardShape {
		170 415 moveto    90 415 0 365 -20 255 curveto
		-50 365 -140 415 -220 415 curveto
		-320 415 -420 315 -400 175 curveto
		-380 45 -130 -165 -30 -455 curveto
		60 -175 290 -35 350 175 curveto
		380 315 270 415 170 415 curveto    closepath
	} def
	/BuildChar {				%  interface procedure
		rootfont /RootBuildChar get	%  get root font proc
		exec				%  execute it
	} def					%  end of interface procedure
end						%  remove from dict stack
/Hearts-Suit exch				%  name of font
definefont					%  define this base font
pop						%  remove extraneous dict

12 dict						%  dictionary for base font
dup						%  make copy for later
begin						%  place on dictionary stack
	/FontName /Spades-Suit def		%  define name
	/FontType 3 def				%  user-defined font
	/FontMatrix [ 0.001 0 0 0.001 0 0 ] def	%  1000-unit system
	/FontBBox [ 0 0 0 0 ] def		%  overall font bounding box
	/Encoding 256 array def			%  encoding
	0 1 255 {				%  fill with /.notdef
		Encoding exch /.notdef put
	} for
	(0) 0 get				%  get position of char "0"
	Encoding exch				%  get encoding
	[					%  ten characters
		/Ten /.notdef /Two /Three /Four
		/Five /Six /Seven /Eight /Nine
	] putinterval				%  fill in character codes
	(A) 0 get				%  get position of "A"
	Encoding exch				%  get encoding
	/Ace put				%  put name for /Ace
	/Metrics 10 dict def			%  define Metrics dictionary
	/UniqueID 1 def				%  ensure unique ID
	/CardShape {
            0 425 moveto
            -20 235 -340 45 -340 -75 curveto
            -340 -175 -260 -235 -180 -235 curveto
            -130 -235 -60 -205 -10 -125 curveto
            -10 -345 -150 -385 -270 -395 curveto
            -280 -425 lineto
            -230 -425 lineto
            -90 -395 90 -395 240 -425 curveto
            280 -425 lineto
            280 -395 lineto
            50 -375 20 -245 20 -125 curveto
            50 -205 120 -235 180 -235 curveto
            260 -235 340 -175 340 -85 curveto
            340 65 50 195 0 425 curveto
            closepath
	} def
	/BuildChar {				%  interface procedure
		rootfont /RootBuildChar get	%  get root font proc
		exec				%  execute it
	} def					%  end of interface procedure
end						%  remove from dict stack
/Spades-Suit exch				%  name of font
definefont					%  define this base font
pop						%  remove extraneous dict


14 dict						%  define dictionary
begin						%  place on dictionary stack
	/FontName /Playing-Cards def		%  define name
	/FontType 0 def				%  0 = composite font
	/WMode 0 def				%  0 = horizontal
	/FontMatrix matrix def			%  dummy matrix
	/Encoding [ 0 1 2 3 ] def		%  four base fonts
	/FMapType 3 def				%  3 = escape code mapping
	/EscChar 255 def			%  escape character
	/FDepVector [				%  define base fonts
		/Clubs-Suit findfont
		/Diamonds-Suit findfont
		/Hearts-Suit findfont
		/Spades-Suit findfont
	] def
	/RootBuildChar {			%  stack = code  dictionary
		exch begin			%  place on dictionary stack
		Encoding exch get		%  get character name
						%  establish metrics
		dup /.notdef eq {
			0 0 0 0 0 0 setcachedevice
		} {
			750 0 0 0 750 1000 setcachedevice
		} ifelse
		rootfont /CharProcs get		%  get this font's CharProcs
		exch get			%  get character procedure
		rootfont /CharProcs get		%  get this font's CharProcs
		begin				%  place on dictionary stack
			exec			%  execute drawing procedure
		end				%  remove from stack
		end				%  remove from stack
	} def					%  end of interface procedure
	/CharProcs 23 dict def			%  create dictionary
	CharProcs begin				%  put on dictionary stack
	/CardWidth  650 def
	/CardHeight 900 def
	/LeftEdge 750 CardWidth sub 2 div def
	/RightEdge LeftEdge CardWidth add def
	/BottomEdge 1000 CardHeight sub 2 div def
	/TopEdge BottomEdge CardHeight add def
	/VertMiddle 500 def
	/HorMiddle 375 def
	/Radius 72 def				%  radius for corners
	/.notdef { } def			%  very important!!!
	/NineTen     {  internal procedure    } def
	/CardOutline {				%  define outline procedure
		mark				%  push mark for later cleanup
		HorMiddle BottomEdge moveto	%  set current point
		RightEdge BottomEdge RightEdge VertMiddle Radius arcto
		RightEdge TopEdge HorMiddle TopEdge Radius arcto
		LeftEdge TopEdge LeftEdge VertMiddle Radius arcto
		LeftEdge BottomEdge HorMiddle BottomEdge Radius arcto
		closepath			%  finish shape
		16 setlinewidth			%  fat line width
		stroke				%  paint outline
		cleartomark			%  remove jetsam from stack
		PutSmall			%  place spots at corners
	} def					%  end of definition
	/PutSmall {				%  define procedure
		gsave				%  remember graphics state
			LeftEdge TopEdge translate  %  set origin
			0.100 dup scale		%  scale small
			500 -700 translate	%  move origin to middle
			CardShape fill		%  fill the shape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			RightEdge BottomEdge translate	%  set origin
			0.100 dup scale		%  scale small
			-500 700 translate	%  move origin to middle
			1 -1 scale		%  flip coordinate system
			CardShape fill		%  fill the shape
		grestore			%  restore graphics state
	} def					%  end of definition
	/Ace {					%  define Ace procedure
		CardOutline			%  draw card border
		HorMiddle VertMiddle translate	%  origin to center of card
		0.75 dup scale			%  set scale factor
		CardShape fill			%  fill CardShape outline
	} def
	/Two {					%  define two procedure
		CardOutline			%  draw card border
		gsave				%  remember graphics state
			HorMiddle		%  x position
			TopEdge 160 sub		%  y position
			translate		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			HorMiddle		%  x position
			BottomEdge 160 add	%  y position
			translate		%  set origin
			0.20 dup neg scale	%  set scale for upside-down
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Three {				%  define Three procedure
		Two				%  execute Two definition
		gsave				%  remember graphics state
			HorMiddle		%  x position
			VertMiddle		%  y position
			translate		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Four {					%  define Four procedure
		CardOutline			%  draw card border
		gsave				%  remember graphics state
			LeftEdge CardWidth 4 div add  %  x position
			TopEdge 160 sub translate  %  y position
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			RightEdge CardWidth 4 div sub  %  x position
			TopEdge 160 sub translate  %  y position
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			LeftEdge CardWidth 4 div add  %  x position
			BottomEdge 160 add translate  %  y position
			0.20 dup neg scale	%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			LeftEdge CardWidth 4 div 3 mul add  %  x position
			BottomEdge 160 add translate  %  y position
			0.20 dup neg scale	%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Five {					%  define Five procedure
		Four				%  execute Four definition
		gsave				%  remember graphics state
			HorMiddle		%  x position
			VertMiddle		%  y position
			translate		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Six {					%  define Six procedure
		Four				%  execute Four definition
		gsave				%  remember graphics state
			LeftEdge CardWidth 4 div add  %  x position
			VertMiddle 		%  y position
			translate 		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			RightEdge CardWidth 4 div sub  %  x position
			VertMiddle 		%  y position
			translate 		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Seven {				%  define Seven procedure
		Six				%  execute Six definition
		gsave				%  remember graphics state
			HorMiddle 		%  x position
			TopEdge CardHeight 3 div sub  %  y position
			translate 		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Eight {				%  define Eight procedure
		Seven				%  execute Seven definition
		gsave				%  remember graphics state
			HorMiddle 		%  x position
			BottomEdge CardHeight 3 div add  %  y position
			translate 		%  set origin
			0.20 dup neg scale	%  set scale factor
			CardShape fill		%  draw and fill CardShape
			grestore		%  restore graphics state
	} def
	/NineTen {				%  define NineTen procedure
		Four				%  execute Four definition
		gsave				%  remember graphics state
			LeftEdge CardWidth 4 div add  %  x position
			TopEdge 350 sub		%  y position
			translate		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			RightEdge CardWidth 4 div sub  %  x position
			TopEdge 350 sub		%  y position
			translate		%  set origin
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			LeftEdge CardWidth 4 div add  %  x position
			BottomEdge 350 add	%  y position
			translate		%  set origin
			0.20 dup neg scale	%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			RightEdge CardWidth 4 div sub  %  x position
			BottomEdge 350 add	%  y position
			translate		%  set origin
			0.20 dup neg scale	%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Nine {					%  define Nine procedure
		NineTen				%  execute NineTen definition
		gsave				%  remember graphics state
			HorMiddle VertMiddle translate  %  trnslte middle spot
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	/Ten {					%  define Ten procedure
		NineTen				%  execute NineTen definition
		gsave				%  remember graphics state
			HorMiddle		%  x position
			TopEdge CardHeight 4 div sub  %  y position
			translate		%  translate for middle spot
			0.20 dup scale		%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
		gsave				%  remember graphics state
			HorMiddle		%  x position
			BottomEdge CardHeight 4 div add  %  y position
			translate		%  translate for middle spot
			0.20 dup neg scale	%  set scale factor
			CardShape fill		%  draw and fill CardShape
		grestore			%  restore graphics state
	} def
	end					%  remove from dict stack
	FontName				%  get font name
	currentdict				%  get this dictionary
end						%  remove from dict stack
definefont					%  define the font
pop						%  remove extraneous dict


/inch { 72 mul } def			%  define inch procedure
/h_pos 8.5 inch 5 div def		%  horizontal positions
/v_pos 11 inch 8 div def		%  vertical positions
/Playing-Cards findfont			%  find required font
v_pos scalefont				%  scale to required size
setfont					%  make it current font
/CardCodes [				%  card codes for positions
  (\377\000A) (\377\0002) (\377\0003) (\377\0004) (\377\0005)
  (\377\0006) (\377\0007) (\377\0008) (\377\0009) (\377\0000)
  (\377\001A) (\377\0012) (\377\0013) (\377\0014) (\377\0015)
  (\377\0016) (\377\0017) (\377\0018) (\377\0019) (\377\0010)
  (\377\002A) (\377\0022) (\377\0023) (\377\0024) (\377\0025)
  (\377\0026) (\377\0027) (\377\0028) (\377\0029) (\377\0020)
  (\377\003A) (\377\0032) (\377\0033) (\377\0034) (\377\0035)
  (\377\0036) (\377\0037) (\377\0038) (\377\0039) (\377\0030)
] def
0.25 inch 0 translate 			%  set origin initially
0 1 7 {					%  iterate over rows
	/row exch def
	0 1 4 {				%  iterate over columns
		/col exch def
		col h_pos mul		%  compute x coordinate
		11 inch v_pos sub row v_pos mul sub  %  compute y coordinate
		moveto			%  set current point
		row 5 mul col add	%  compute card number
		CardCodes exch get	%  get the show string
		show			%  image the card
	} for				%  end column loop
} for					%  end row loop
showpage				%  display page
